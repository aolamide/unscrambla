{"version":3,"sources":["connection.js","pages/Home.jsx","components/Loading/Loading.jsx","components/HostWaiting/HostWaiting.jsx","components/GamePreparing/GamePreparing.jsx","components/Game/Game.jsx","components/NameForm/NameForm.jsx","components/Result/Result.jsx","pages/Play.jsx","App.js","reportWebVitals.js","index.js"],"names":["socket","socketIOClient","ConnectionContext","createContext","Home","useState","code","setCode","navigate","useNavigate","onSubmit","e","preventDefault","type","value","onChange","target","name","placeholder","to","Loading","HostWaiting","GamePreparing","opponentName","countdown","setCountDown","useEffect","interval","setInterval","clearInterval","style","display","Game","gameCode","host","score","setScore","opponentScore","setOpponentScore","messages","setMessages","pick","setPick","scrambledWord","setScrambledWord","useContext","emit","on","msg","newMsg","currentMessages","word","update","hostScore","playerTwoScore","off","justifyContent","initialTime","direction","Minutes","Seconds","formatValue","map","message","index","wordPick","userId","id","NameForm","setName","playerName","Result","results","marginRight","Play","loading","setLoading","isHost","setIsHost","setGameCode","playerTwoName","setPlayerTwoName","hostWaiting","setHostWaiting","gamePreparing","setGamePreparing","gameStarted","setGameStarted","gameEnded","setGameEnded","setResults","useSearchParams","params","get","success","alert","gameId","result","playerTwo","App","console","log","Provider","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09c00664.chunk.js","sourcesContent":["import { createContext } from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nexport const socket = socketIOClient();\r\nexport const ConnectionContext = createContext();","import React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\nconst Home = () => {\r\n  const [code, setCode] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const submitCode = e => {\r\n    e.preventDefault();\r\n    navigate('/play?code=' + code);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={submitCode}>\r\n        <h2>JOIN GAME</h2>\r\n        <input type=\"text\" value={code} onChange={e => setCode(e.target.value)} name='code' placeholder=\"Enter game code\" />\r\n        <button>Join Game</button>\r\n      </form>\r\n      <p>OR</p>\r\n      <Link to='/play'>\r\n        HOST GAME\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst Loading = () => {\r\n  return <p>Loading...</p>\r\n}\r\n\r\nexport default Loading;","import React from 'react'\r\n\r\nconst HostWaiting = ({ code }) => {\r\n  return (\r\n    <div>\r\n      <p>Tell the other play to visit jjj.com and join with the code <strong>{code}</strong></p>\r\n      <p>Waiting for player to join...</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HostWaiting;","import React, { useState, useEffect } from 'react'\r\n\r\nconst GamePreparing = ({ name, opponentName }) => {\r\n  const [countdown, setCountDown] = useState(10);\r\n\r\n  useEffect(() => {\r\n    let interval = setInterval(() => setCountDown(countdown => --countdown), 1000);\r\n    return (() => clearInterval(interval));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <p>Ready ! Game starts in <strong>{countdown}</strong></p>\r\n      <div style={{ display : 'flex' }}>\r\n        <div>\r\n          <small>You</small>\r\n          <p>{name}</p>\r\n        </div>\r\n        <div>\r\n          <small>Opponent</small>\r\n          <p>{opponentName}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GamePreparing;","import React, { useContext, useEffect, useState } from 'react'\r\nimport { ConnectionContext } from '../../connection'\r\n\r\nimport Timer from 'react-compound-timer';\r\n\r\nconst Game = ({ name, opponentName, gameCode, host }) => {\r\n  const [score, setScore] = useState(0);\r\n  const [opponentScore, setOpponentScore] = useState(0);\r\n  const [messages, setMessages] = useState([]);\r\n  const [pick, setPick] = useState('');\r\n  const [scrambledWord, setScrambledWord] = useState('');\r\n  const socket = useContext(ConnectionContext);\r\n\r\n  const submitWord = e => {\r\n    e.preventDefault();\r\n    socket.emit('playerTry', { wordPick : pick, gameCode, userId : socket.id });\r\n    setMessages(messages => [...messages, { type : 'user', msg : pick }]);\r\n    setPick('');\r\n  }\r\n\r\n  useEffect(() => {\r\n    socket.emit('getScrambledWord', gameCode);\r\n\r\n    socket.on('adminMessage', msg => {\r\n      const newMsg = { type : 'admin', msg };\r\n      setMessages(currentMessages => [...currentMessages, newMsg]);\r\n    });\r\n    socket.on('opponentTry', msg => {\r\n      const newMsg = { type : 'opponent', msg };\r\n      setMessages(currentMessages => [...currentMessages, newMsg]);\r\n    });\r\n    socket.on('newScrambledWord', word => {\r\n      setScrambledWord(word);\r\n    });\r\n    socket.on('scoreUpdate', update => {\r\n      if(update) {\r\n        const { hostScore, playerTwoScore } = update;\r\n        setScore(host ? hostScore : playerTwoScore);\r\n        setOpponentScore(host ? playerTwoScore : hostScore);\r\n      }\r\n    })\r\n    return (() => {\r\n      socket.off('adminMessage');\r\n      socket.off('opponentTry');\r\n      socket.off('newScrambledWord')\r\n    })\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <p>Game is live.</p>\r\n      <div style={{ display : 'flex', justifyContent : 'space-between' }}>\r\n        <div>\r\n          <p>{name}</p>\r\n          <p>{score}</p>\r\n        </div>\r\n        <div>vs</div>\r\n        <div>\r\n          <p>{opponentName}</p>\r\n          <p>{opponentScore}</p>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <Timer\r\n          initialTime={1000 * 60 * 2}\r\n          direction=\"backward\"\r\n        >\r\n          <div>\r\n            <strong>\r\n              <Timer.Minutes /> :\r\n              <Timer.Seconds formatValue={(value) => `${(value < 10 ? ` 0${value}` : ` ${value}`)}`} />\r\n            </strong>\r\n            \r\n          </div>\r\n        </Timer>\r\n      </div>\r\n      <div>\r\n        Current word : <strong>{scrambledWord} </strong>\r\n      </div>\r\n      <div>\r\n        {messages.map((message, index) => {\r\n          if(message.type === 'admin') return <p key={index}>Admin message : {message.msg}</p>\r\n          else if(message.type === 'user') return <p key={index}>Your message : {message.msg}</p>\r\n          return <p key={index}>Opponent message : {message.msg}</p>\r\n        })}\r\n      </div>\r\n      <form onSubmit={submitWord}>\r\n        <input type=\"text\" placeholder=\"Enter word here\" value={pick} onChange={e => setPick(e.target.value)} />\r\n      </form>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Game","import React, { useContext, useState } from 'react'\r\nimport { ConnectionContext } from '../../connection'\r\n\r\nconst NameForm = ({ host, gameCode }) => {\r\n  const [name, setName] = useState('');\r\n  const socket = useContext(ConnectionContext);\r\n\r\n  const hostGame = e => {\r\n    e.preventDefault();\r\n    socket.emit('createGame', name);\r\n  }\r\n\r\n  const joinGame = e => {\r\n    e.preventDefault();\r\n    socket.emit('joinGame', { playerName : name, gameCode });\r\n  }\r\n  return (\r\n    <div>\r\n      <form onSubmit={host ? hostGame : joinGame}>\r\n        <input value={name} onChange={e => setName(e.target.value)} type=\"text\" placeholder=\"Enter your name\" />\r\n        <button>{host ? 'HOST GAME' : 'JOIN GAME'}</button>\r\n      </form>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nexport default NameForm","import React from 'react';\r\n\r\nconst Result = ({ results, host, name, opponentName }) => {\r\n  return (\r\n    <div>\r\n      <h1>Game result</h1>\r\n      <div style={{ display : 'flex' }}>\r\n        <div style={{ marginRight : '20px'}}>\r\n          <p>{name}</p>\r\n          <p><strong>{host ? results?.hostScore : results?.playerTwoScore}</strong></p>\r\n        </div>\r\n        <div>\r\n          <p>{opponentName}</p>\r\n          <p><strong>{ host ?  results?.playerTwoScore : results?.hostScore }</strong></p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nexport default Result;","import React, { useContext, useEffect, useState } from 'react';\r\nimport { ConnectionContext } from '../connection';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom'\r\nimport Loading from '../components/Loading/Loading';\r\nimport HostWaiting from '../components/HostWaiting/HostWaiting';\r\nimport GamePreparing from '../components/GamePreparing/GamePreparing';\r\nimport Game from '../components/Game/Game';\r\nimport NameForm from '../components/NameForm/NameForm';\r\nimport Result from '../components/Result/Result';\r\n\r\n\r\nconst Play = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [isHost, setIsHost] = useState(true);\r\n  const [gameCode, setGameCode] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [playerTwoName, setPlayerTwoName] = useState('');\r\n  const [hostWaiting, setHostWaiting] = useState(false);\r\n  const [gamePreparing, setGamePreparing] = useState(false);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [gameEnded, setGameEnded] = useState(false);\r\n  const [results, setResults] = useState(null);\r\n  const [params, _] = useSearchParams();\r\n  const socket = useContext(ConnectionContext);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    let code = params.get('code');\r\n    if(code) {\r\n      setIsHost(false);\r\n      socket.emit('checkCode', code);\r\n      socket.on('checkCodeResult', ({ success, msg }) => {\r\n        if(success) {\r\n          setLoading(false);\r\n          setGameCode(code);\r\n        } \r\n        else {\r\n          alert(msg);\r\n          navigate('/');\r\n        }\r\n      })\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n    socket.on('gameCreated', gameId => {\r\n      setGameCode(gameId);\r\n      setHostWaiting(true);\r\n    });\r\n    \r\n    socket.on('gameStarted', () => {\r\n      setGamePreparing(false);\r\n      setGameStarted(true);\r\n    });\r\n\r\n    socket.on('gameEnded', result => {\r\n      if(result) {\r\n        setResults(result);\r\n      }\r\n      setGameStarted(false);\r\n      setGameEnded(true);\r\n    });\r\n\r\n    return (() => {\r\n      socket.off('checkCodeResult');\r\n      socket.off('gameCreated');\r\n      socket.off('gameReady');\r\n      socket.off('gameStarted');\r\n      socket.off('gameEnded');\r\n    })\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on('gameReady', ({ host, playerTwo }) => {\r\n      setName(isHost ? host : playerTwo);\r\n      setPlayerTwoName(isHost ? playerTwo : host);\r\n      \r\n      setHostWaiting(false);\r\n      setGamePreparing(true);\r\n    });\r\n    return (() => {\r\n      socket.off('gameReady');\r\n    })\r\n  }, [isHost]);\r\n\r\n  if(loading) return <Loading />\r\n  if(hostWaiting) return <HostWaiting code={gameCode} />\r\n  if(gamePreparing) return <GamePreparing name={name} opponentName={playerTwoName} />\r\n  if(gameStarted) return <Game name={name} opponentName={playerTwoName} gameCode={gameCode} host={isHost} />\r\n  if(gameEnded) return <Result results={results} host={isHost} name={name} opponentName={playerTwoName} />\r\n  return (\r\n    <NameForm host={isHost} gameCode={gameCode} />\r\n  );\r\n}\r\n\r\nexport default Play;","import './App.css';\nimport { useEffect } from 'react'\nimport { ConnectionContext, socket } from './connection';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\nimport Home from './pages/Home';\nimport Play from './pages/Play';\n\nfunction App() {\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log(socket.id);\n    })\n  }, []);\n\n  return (\n    <ConnectionContext.Provider value={socket}>\n      <Router>\n        <Routes>\n          <Route path='/' element={<Home />} />\n          <Route path='/play' element={<Play />} />\n        </Routes>\n      </Router>\n      {/* <div className=\"App\">\n        <p>Hey there</p>\n      </div> */}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}